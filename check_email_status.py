#!/usr/bin/env python3
"""
V√©rificateur de statut des t√¢ches Celery
Association Gamadji Sar√©

Permet de suivre l'avancement des envois d'emails en arri√®re-plan.
"""

import sys
import os
import argparse
from pathlib import Path

# Ajouter le dossier racine au path pour les imports
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))


def check_task_status(task_id):
    """V√©rifie le statut d'une t√¢che Celery"""
    try:
        from scripts.email_sender.celery_config import celery_app
        from celery.result import AsyncResult
        
        print(f"üîç V√âRIFICATION DU STATUT DE LA T√ÇCHE: {task_id}")
        print("=" * 60)
        
        result = AsyncResult(task_id, app=celery_app)
        
        print(f"√âtat: {result.state}")
        
        if result.state == 'PENDING':
            print("‚è≥ T√¢che en attente de traitement...")
        elif result.state == 'STARTED':
            print("üîÑ T√¢che en cours d'ex√©cution...")
        elif result.state == 'SUCCESS':
            print("‚úÖ T√¢che termin√©e avec succ√®s!")
            if result.result:
                print(f"\nR√©sultat:")
                print(result.result)
        elif result.state == 'FAILURE':
            print("‚ùå T√¢che √©chou√©e!")
            print(f"Erreur: {result.info}")
        elif result.state == 'RETRY':
            print("üîÑ T√¢che en cours de nouvelle tentative...")
        else:
            print(f"‚ÑπÔ∏è  √âtat: {result.state}")
        
        # Afficher les infos suppl√©mentaires si disponibles
        if result.info:
            print(f"\nInformations suppl√©mentaires:")
            if isinstance(result.info, dict):
                for key, value in result.info.items():
                    print(f"  {key}: {value}")
        
        return result
        
    except ImportError as e:
        print("‚ùå Erreur: Celery ou Redis n'est pas install√©/configur√©")
        print(f"   {str(e)}")
        print("\nüí° Solutions:")
        print("   1. Installez les d√©pendances: pip install -r requirements.txt")
        print("   2. D√©marrez Redis: redis-server")
        print("   3. D√©marrez le worker Celery: ./start_celery_worker.sh")
        return None
    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")
        return None


def check_bulk_status(bulk_task_id):
    """V√©rifie le statut d'une t√¢che d'envoi en masse"""
    print(f"üìä V√âRIFICATION DE L'ENVOI EN MASSE: {bulk_task_id}")
    print("=" * 60)
    
    result = check_task_status(bulk_task_id)
    
    if result and result.state == 'SUCCESS' and isinstance(result.result, dict):
        tasks = result.result.get('tasks', [])
        
        if tasks:
            print(f"\nüìß D√©tails des envois individuels:")
            print(f"   Total: {len(tasks)} emails")
            
            # V√©rifier quelques t√¢ches individuelles
            from scripts.email_sender.celery_config import celery_app
            from celery.result import AsyncResult
            
            success_count = 0
            failed_count = 0
            pending_count = 0
            
            for task_info in tasks:
                task_result = AsyncResult(task_info['task_id'], app=celery_app)
                
                if task_result.state == 'SUCCESS':
                    success_count += 1
                elif task_result.state == 'FAILURE':
                    failed_count += 1
                elif task_result.state in ['PENDING', 'STARTED', 'RETRY']:
                    pending_count += 1
            
            print(f"\n   ‚úÖ R√©ussis: {success_count}")
            print(f"   ‚ùå √âchou√©s: {failed_count}")
            print(f"   ‚è≥ En attente/cours: {pending_count}")


def list_active_tasks():
    """Liste toutes les t√¢ches actives"""
    try:
        from scripts.email_sender.celery_config import celery_app
        
        print("üìã T√ÇCHES ACTIVES")
        print("=" * 60)
        
        # Obtenir les t√¢ches actives
        inspect = celery_app.control.inspect()
        
        active = inspect.active()
        scheduled = inspect.scheduled()
        reserved = inspect.reserved()
        
        if active:
            print("\nüîÑ T√¢ches en cours d'ex√©cution:")
            for worker, tasks in active.items():
                print(f"\n  Worker: {worker}")
                for task in tasks:
                    print(f"    - {task['name']} (ID: {task['id'][:8]}...)")
        
        if scheduled:
            print("\n‚è∞ T√¢ches planifi√©es:")
            for worker, tasks in scheduled.items():
                print(f"\n  Worker: {worker}")
                for task in tasks:
                    print(f"    - {task['request']['name']} (ID: {task['request']['id'][:8]}...)")
        
        if reserved:
            print("\nüì• T√¢ches r√©serv√©es:")
            for worker, tasks in reserved.items():
                print(f"\n  Worker: {worker}")
                for task in tasks:
                    print(f"    - {task['name']} (ID: {task['id'][:8]}...)")
        
        if not active and not scheduled and not reserved:
            print("‚ÑπÔ∏è  Aucune t√¢che active")
            print("\nüí° Si vous attendez des envois:")
            print("   1. V√©rifiez que le worker Celery est d√©marr√©")
            print("   2. V√©rifiez que Redis est accessible")
            print("   3. Relancez l'envoi si n√©cessaire")
        
    except Exception as e:
        print(f"‚ùå Impossible de lister les t√¢ches actives: {str(e)}")
        print("\nüí° Assurez-vous que:")
        print("   - Redis est d√©marr√©")
        print("   - Le worker Celery est actif")


def main():
    """Point d'entr√©e principal"""
    parser = argparse.ArgumentParser(
        description="V√©rifier le statut des t√¢ches d'envoi d'emails Celery"
    )
    parser.add_argument(
        'task_id',
        nargs='?',
        help="ID de la t√¢che √† v√©rifier (optionnel)"
    )
    parser.add_argument(
        '--list',
        '-l',
        action='store_true',
        help="Lister toutes les t√¢ches actives"
    )
    parser.add_argument(
        '--bulk',
        '-b',
        action='store_true',
        help="V√©rifier le statut d√©taill√© d'un envoi en masse"
    )
    
    args = parser.parse_args()
    
    if args.list:
        list_active_tasks()
    elif args.task_id:
        if args.bulk:
            check_bulk_status(args.task_id)
        else:
            check_task_status(args.task_id)
    else:
        print("üìä MONITEUR DE T√ÇCHES CELERY - ENVOI D'EMAILS")
        print("=" * 60)
        print("\nUtilisation:")
        print("  python check_email_status.py <task_id>        # V√©rifier une t√¢che")
        print("  python check_email_status.py <task_id> --bulk # Envoi en masse d√©taill√©")
        print("  python check_email_status.py --list           # Lister les t√¢ches actives")
        print("\nExemples:")
        print("  python check_email_status.py abc123-def456-...")
        print("  python check_email_status.py --list")
        print()


if __name__ == "__main__":
    main()
